// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ClusterAABB
#pragma kernel AssignLightsToClusters

#include "./ClusterBasedLightingCommon.hlsl"

#define ClusterNumX 16
#define ClusterNumY 16

RWStructuredBuffer<AABB> RWClusterAABBs;


float3 MatTransformProj(float4x4 mat, float3 v3)
{
    float4 v4 = float4(v3, 1.0);
    v4 = mul(mat, v4);
    v4 /= v4.w;
    return v4.xyz;
}

//这里16 和ClusterBasedLights 的ClusterNum保持一致
[numthreads(ClusterNumX, ClusterNumY, 1)]
void ClusterAABB(ComputeShaderInput IN)
{
    uint i = IN.GroupThreadID.x;
    uint j = IN.GroupThreadID.y;
    uint k = IN.GroupID.x;
    uint3 clusterIndex3D = uint3(i, j, k);
    //将1D转化为3D
    uint clusterIndex1D = ComputeClusterIndex1D(clusterIndex3D);

    // Compute the near and far planes for cluster K.
    Plane nearPlane = {
        0.0f, 0.0f, 1.0f, k * ClusterCB_Size.z
    };
    Plane farPlane = {
        0.0f, 0.0f, 1.0f, (k + 1) * ClusterCB_Size.z
    };

    // The top-left point of cluster K in screen space.
    float4 pMin = float4(clusterIndex3D.xy * ClusterCB_Size.xy, 0.0f, 1.0f);
    // The bottom-right point of cluster K in screen space.
    float4 pMax = float4((clusterIndex3D.xy + 1) * ClusterCB_Size.xy, 0.0f, 1.0f);

    // Transform the screen space points to view space.
    pMin = ScreenToView(pMin);
    pMax = ScreenToView(pMax);

    pMin.z *= -1;
    pMax.z *= -1;

    // Find the min and max points on the near and far planes.
    float3 nearMin, nearMax, farMin, farMax;
    // Origin (camera eye position)
    float3 eye = float3(0, 0, 0);
    IntersectLinePlane(eye, (float3)pMin, nearPlane, nearMin);
    IntersectLinePlane(eye, (float3)pMax, nearPlane, nearMax);
    IntersectLinePlane(eye, (float3)pMin, farPlane, farMin);
    IntersectLinePlane(eye, (float3)pMax, farPlane, farMax);

    float3 aabbMin = min(nearMin, min(nearMax, min(farMin, farMax)));
    float3 aabbMax = max(nearMin, max(nearMax, max(farMin, farMax)));

    AABB aabb = {
        aabbMin, aabbMax
    };
    
    RWClusterAABBs[clusterIndex1D] = aabb;
}


///////////////////////////////////////////

RWStructuredBuffer<LightIndex> RWLightAssignTable;// : register(u4);
RWStructuredBuffer<uint> RWPointLightIndexList_Cluster;// : register(u6);

StructuredBuffer<AABB> ClusterAABBs;//第一步算好的全部Cluster信息
StructuredBuffer<PointLight> PointLights;//全部点光源信息

uint PointLightCount;//点光源总数量
float4x4 _CameraLastViewMatrix;


float3 TransformWorldToView(float3 posWorld)
{
    float3 posView = mul(_CameraLastViewMatrix, float4(posWorld, 1.0f)).xyz;
    return posView;
}

//光源求交
//每个Cluster执行一次 遍历全部灯光
[numthreads(ClusterNumX, ClusterNumY, 1)]
void AssignLightsToClusters(ComputeShaderInput IN)
{
    uint i = IN.GroupThreadID.x;
    uint j = IN.GroupThreadID.y;
    uint k = IN.GroupID.x;
    uint3 clusterIndex3D = uint3(i, j, k);
    //将1D转化为3D
    uint clusterIndex1D = ComputeClusterIndex1D(clusterIndex3D);
    AABB aabb = ClusterAABBs[clusterIndex1D];
    
    uint startIndex = clusterIndex1D * 20;
    uint endIndex = startIndex;

    //计算当前 cluster  所受点光源影响的总个数 并填充光源index 列表
    for (uint lid = 0; lid < PointLightCount; lid++)
    {
        PointLight pointLight = PointLights[lid];
        float3 pointLightPositionVS = TransformWorldToView(pointLight.position);
        //灯光是世界坐标的 需要放在同一坐标系下
        //AABB都是基于0矩阵的 非世界坐标
        Sphere sphere = {
            pointLightPositionVS, pointLight.range
        };

        if (SphereInsideAABB(sphere, aabb))
        {
            //向目标cluster添加pointlight 下标
            //gs_PointLightCount ++
            //每个cluster存放的pointLightIndex 填充pointlist 的列表
            // AppendLight(i);
            RWPointLightIndexList_Cluster[endIndex++] = uint(lid);
        }
    }

    LightIndex lightIndex;
    lightIndex.start = startIndex;
    lightIndex.count = endIndex - startIndex;
    RWLightAssignTable[clusterIndex1D] = lightIndex;
}
